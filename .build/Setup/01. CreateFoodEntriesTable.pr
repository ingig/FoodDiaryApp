{
  "Action": {
    "FunctionName": "CreateTable",
    "Parameters": [
      {
        "Type": "String",
        "Name": "sql",
        "Value": "CREATE TABLE food_entries (id BIGINT PRIMARY KEY, date TIMESTAMP NOT NULL, dish_name TEXT NOT NULL, user_input TEXT, total_weight NUMERIC, ingredients JSON, total_calories NUMERIC, carbs NUMERIC, fat NUMERIC, protein NUMERIC, emojis TEXT)"
      }
    ],
    "ReturnValue": null
  },
  "Text": "create table food_entries\n    columns: date(datetime, not null), dish_name(string, not null), user_input(string), total_weight(number),\n             ingredients(json), total_calories(number), carbs(number), fat(number), protein(number)\n            , emojis(string)",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "json",
    "scheme": "{\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: [{\"Type\": string,\n\"VariableName\": string}] = null}",
    "type": "PLang.Modules.DbModule.Builder",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Map user command to this c# function: \r\n\r\n## csharp function ##\r\nvoid CreateTable(String sql)  \r\n## csharp function ##\r\n\r\nIf table name is a variable, keep the variable in the sql statement\r\nvariable is defined with starting and ending %, e.g. %filePath%.\r\nYou MUST generate a valid sql statement for PostgreSQL.\r\nYou MUST add id to create statement.\r\nIf id is not defined then add id to the create statement. \r\nThe id MUST NOT be auto incremental, but is primary key.\r\nThe id should be datatype long/bigint/.. which fits PostgreSQL.\r\n"
          },
          {
            "type": "text",
            "text": "You MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: [{\"Type\": string,\n\"VariableName\": string}] = null}"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## functions available starts ##\r\nvoid CreateDataSource(String name, String? dbType, Boolean? setAsDefaultForApp = False, Boolean? keepHistoryEventSourcing = False) \nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nvoid LoadExtension(String fileName, String? procName) \nString GetDatabaseStructure()  // Returns tables and views in database with the columns description. \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject SelectOneRow(String sql, List`1<Object>? SqlParameters) \nList`1 Select(String sql, List`1<Object>? SqlParameters) \nInt32 Update(String sql, List`1<Object>? SqlParameters) \nInt32 Delete(String sql, List`1<Object>? SqlParameters) \nInt32 Insert(String sql, List`1<Object>? SqlParameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, List`1<Object>? SqlParameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \nInt32 InsertBulk(String tableName, List`1<Object> items)  // Insert a list(bulk) into database, return number of rows inserted. \nString GetAdditionalSystemErrorInfo() \nString GetAdditionalAssistantErrorInfo()\r\n## functions available ends ##"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "create table food_entries\n    columns: date(datetime, not null), dish_name(string, not null), user_input(string), total_weight(number),\n             ingredients(json), total_calories(number), carbs(number), fat(number), protein(number)\n            , emojis(string)"
          }
        ]
      }
    ],
    "model": "gpt-4-turbo",
    "caching": true,
    "RawResponse": "```json\n{\n  \"FunctionName\": \"CreateTable\",\n  \"Parameters\": [\n    {\n      \"Type\": \"String\",\n      \"Name\": \"sql\",\n      \"Value\": \"CREATE TABLE food_entries (id BIGINT PRIMARY KEY, date TIMESTAMP NOT NULL, dish_name TEXT NOT NULL, user_input TEXT, total_weight NUMERIC, ingredients JSON, total_calories NUMERIC, carbs NUMERIC, fat NUMERIC, protein NUMERIC, emojis TEXT)\"\n    }\n  ]\n}\n```"
  },
  "RunOnBuild": false
}